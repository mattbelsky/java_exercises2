
1) What is the difference between the Thread and Runnable?

Thread is a class, and Runnable is an interface.


2) How do you start a thread using Runnable?

class <classname> implements Runnable {
    Thread t;

    public <classname> {
        t = new Thread();
        t.start();
    }

    public void run() {
        // code to run
    }
}


3) How do you start a thread using Thread?

class <classname> extends Thread {
    public <classname> {
        super();
        start();
    }

    @Override
    public void run() {
        // code to run
    }
}


4) How do you get a thread's name?

<classname>.thread.getName();


5) What does the "synchronize()" method do?

pauses a thread's execution until the synchronized method is exited


6) What doe the "join()" method do?

causes a thread to wait for the specified thread to finish executing before continuing its own execution


7) What does the "sleep()" method do?

pauses a thread's execution for a specified number of milliseconds


8) What is the one method you must write if you're implementing the Runnable class?

run()


9) Should you create that same method if you're extending Thread?

Yes, but ensure that it's labeled as overridden.


10) Why is multi-threading so cool?

It allows you greater control over a program's execution and take full advantage of multicore processors.

